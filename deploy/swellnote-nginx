upstream api_server {
    # fail_timeout=0 means we always try an upstream even if it failed previously
    server unix:/tmp/swellnote.sock fail_timeout=0;
}

server {
    # Tuned based on https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/#tuning-the-operating-system
    # and https://unix.stackexchange.com/questions/94104/real-world-use-of-tcp-defer-accept 
    listen 80 backlog=4096 deferred;
    listen [::]:80 backlog=4096 deferred;

    # We expect tiny messages
    client_max_body_size 10K;

    # The application is is a web page with inline CSS and SVG, which gets JS file that grab a message from the API.
    # The keepalive_timeout is tuned to handle the initial group of requests.  Keeping it low lets us free up
    # to handle more concurrent clients. 
    keepalive_timeout 5s;

    # SSL configuration
    #
    # listen 443 ssl default_server;
    # listen [::]:443 ssl default_server;
    #
    # Note: You should disable gzip for SSL traffic.
    # See: https://bugs.debian.org/773332
    #
    # Read up on ssl_ciphers to ensure a secure configuration.
    # See: https://bugs.debian.org/765782
    #
    # Self signed certs generated by the ssl-cert package
    # Don't use them in a production server!
    #
    # include snippets/snakeoil.conf;

    root /home/max/swellnote/swellnote/static;

    server_name swellnote.com;

    location / {
        # Serving index.html as / is actually weirdly complicated?
        # https://stackoverflow.com/questions/11954255/how-to-set-index-html-as-root-file-in-nginx#answer-33440489  
        try_files $uri $uri/index.html @proxy_to_app;
    }

    # TODO: Block folks from going through /static, so nginx servers all static files
    location @proxy_to_app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
        proxy_pass http://api_server;
    }
}
